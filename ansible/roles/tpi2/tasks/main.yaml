---
- name: Update system
  ansible.builtin.apt:
    update_cache: yes
    upgrade: dist
  tags:
    - tpi2-setup

- name: Reboot node
  ansible.builtin.reboot:
      reboot_timeout: 600
  tags:
    - tpi2-setup

- name: Partition, format, and mount SSDs
  block:
    - name: Check if NVMe device exists
      ansible.builtin.stat:
        path: "{{ nvme_device }}"
      register: nvme_stat

    - name: Fail if NVMe device is not found
      ansible.builtin.fail:
        msg: "NVMe device {{ nvme_device }} not found!"
      when: not nvme_stat.stat.exists

    - name: Check if the partition already exists
      ansible.builtin.set_fact:
        partition_exists: "{{ 'nvme0n1p1' in ansible_facts.devices.mvme0n1.partitions | default({}) }}"

    - name: Create GPT partition table
      ansible.builtin.command: "parted -s {{ nvme_device }} mklabel gpt"
      when: 
        - nvme_stat.stat.exists
        - not partition_exists
        - ansible_mounts | selectattr('mount', 'equalto', '/mnt/nvme') | list | length == 0

    - name: Create a single partition
      ansible.builtin.command: "parted -s {{ nvme_device }} mkpart primary {{ file_system_type }} 0% 100%"
      when: 
        - nvme_stat.stat.exists
        - not partition_exists
        - ansible_mounts | selectattr('mount', 'equalto', '/mnt/nvme') | list | length == 0

    - name: Wait for partition to be recognized
      ansible.builtin.pause:
        seconds: 5

    - name: Check if the filesystem is already formatted
      ansible.builtin.command: "blkid -o value -s TYPE {{ nvme_device }}p{{ partition_number }}"
      register: fs_check
      failed_when: false
      changed_when: false

    - name: Format the partition
      ansible.builtin.filesystem:
        fstype: "{{ file_system_type }}"
        dev: "{{ nvme_device }}p{{ partition_number }}"

    - name: Ensure mount point exists
      ansible.builtin.file:
        path: "{{ mount_point }}"
        state: directory
        mode: '0755'

    - name: Check if partition is already in /etc/fstab
      ansible.builtin.command: grep -qs "/mnt/nvme" /etc/fstab
      register: fstab_check
      changed_when: false
      failed_when: false

    - name: Get UUID of the partition
      ansible.builtin.command: "blkid -o value -s UUID {{ nvme_device }}p{{ partition_number }}"
      register: nvme_uuid
      changed_when: false

    - name: Persist mount in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "UUID={{ nvme_uuid.stdout }} {{ mount_point }} {{ file_system_type }} defaults 0 2"
        state: present
      when: fstab_check.rc != 0

    - name: Mount the partition
      ansible.builtin.mount:
        path: "{{ mount_point }}"
        src: "{{ nvme_device }}p{{ partition_number }}"
        fstype: "{{ file_system_type }}"
        state: mounted
  tags:
    - tpi2-setup
    - ssd
    - disk
      
- name: Install /etc/hosts
  ansible.builtin.template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: '0644'
  tags:
    - tpi2-setup

- name: Install systemd-resolved config file
  ansible.builtin.template:
    src: resolved.j2
    dest: /etc/systemd/resolved.conf
    owner: root
    group: root
    mode: '0644'
  notify: systemd-resolved
  tags:
    - tpi2-setup

- name: Install desired packages
  ansible.builtin.apt:
    name:
      - virt-manager
      - qemu
      - qemu-system-arm
      - qemu-efi
      - libvirt-daemon-system
      - libvirt-clients
      - virtinst
      - bridge-utils
      - cloud-image-utils
      - chrony
      - cloud-init
    state: present
  tags:
    - tpi2-setup
    - packages

- name: Remove unneeded packages
  ansible.builtin.apt:
    name:
      - unattended-upgrades
      - nfs-common
      - gnome*
      - nano
      - wireless*
      - wpasupplicant
      - xdg-user-dirs
      - xkbd-data
      - xauth
      - '*v4l*'
      - triggerhappy
    state: absent
    autoremove: true
    purge: true
  tags:
    - tpi2-setup
    - packages

- name: Ensure libvirtd service is enabled and running
  ansible.builtin.systemd:
    name: libvirtd
    enabled: yes
    state: started
  tags:
    - tpi2-setup

- name: Add user to libvirt and kvm groups
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    groups: libvirt,kvm
    append: yes
  tags:
    - tpi2-setup

- name: Restart libvirtd service to apply changes
  ansible.builtin.systemd:
    name: libvirtd
    state: restarted
  tags:
    - tpi2-setup
